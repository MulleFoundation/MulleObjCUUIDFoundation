//
//  NSUUID.m
//  MulleObjCUUIDFoundation
//
//  Copyright (c) 2022 Nat! - Mulle kybernetiK.
//  All rights reserved.
//
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//  Redistributions of source code must retain the above copyright notice, this
//  list of conditions and the following disclaimer.
//
//  Redistributions in binary form must reproduce the above copyright notice,
//  this list of conditions and the following disclaimer in the documentation
//  and/or other materials provided with the distribution.
//
//  Neither the name of Mulle kybernetiK nor the names of its contributors
//  may be used to endorse or promote products derived from this software
//  without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
//  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
//  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
//  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
//  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
//  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
//  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
//  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
//  POSSIBILITY OF SUCH DAMAGE.
//
#ifdef __has_include
# if __has_include( "NSObject.h")
#  import "NSObject.h"
# endif
#endif

#import "import.h"


#define MulleUUIDBytesLength   16
#define MulleUUIDStringLength  37


@interface NSUUID : NSData < MulleObjCValueProtocols>
{
   unsigned char  _bytes[ MulleUUIDBytesLength];
}

+ (instancetype) UUID;
- (instancetype) initWithUUIDString:(NSString *) s;
- (instancetype) initWithUUIDBytes:(unsigned char *) bytes;
- (void) getUUIDBytes:(unsigned char *) bytes;
- (NSString *) UUIDString;

@end

// this is thread-safe
void   MulleGenerateUUIDBytes( unsigned char bytes[ MulleUUIDBytesLength]);

//
// generate output string (including \0) of strict format
// xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx
// actual bits: 30*4 + 2 = 122 ... 6 bits are wasted on versioning
//
void   MulleUUIDBytesToUTF8String( unsigned char bytes[ MulleUUIDBytesLength],
                                   char output[ MulleUUIDStringLength]);

// return -1, if input is incompatible. must be strictly the same as
// was generated by UUIDString
int   MulleUTF8StringToUUIDBytes( char input[ MulleUUIDStringLength],
                                  unsigned char bytes[ MulleUUIDBytesLength]);


static inline void   MulleUUIDBytesZeroVersioningBits( unsigned char bytes[ MulleUUIDBytesLength])
{
   bytes[ 6] &= 0x0F; // that bytes upper nybble is clobbered by the '4'
   bytes[ 8] &= 0x3F; // that bytes upper nybble is partially clobbered by 'y'
}


static inline unsigned int   MulleUUIDBytesGetVersion( unsigned char bytes[ MulleUUIDBytesLength])
{
   return( bytes[ 6] >> 4);
}


static inline int   MulleUTF8StringGetUUIDVersion( char s[ MulleUUIDStringLength])
{
   int   c;

   c = s[ 14];
   if( c >= '0' && c <='9')
      return( c - '0');
   return( -1);
}


static inline int   MulleUTF8StringGetUUIDVariant( char s[ MulleUUIDStringLength])
{
   int   c;

   c = s[ 19];
   if( c >= '0' && c <='9')
      c = c - '0';
   else
      if( c >= 'a' && c <='f')
         c = c - 'a' + 10;
      else
         if( c >= 'A' && c <='F')
            c = c - 'A' + 10;
         else
            return( -1);

   return( c >> 2);
}

